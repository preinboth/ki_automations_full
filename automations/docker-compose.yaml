version: '3.9'
services:


  # n8n:
  #   image: docker.n8n.io/n8nio/n8n
  #   environment:
  #     - N8N_BASIC_AUTH_ACTIVE=true
  #     - N8N_BASIC_AUTH_USER=${N8N_USER}
  #     - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
  #     - N8N_PROTOCOL=${N8N_PROTOCOL}
  #     - N8N_HOST=${N8N_HOST}
  #     - N8N_PORT=${N8N_PORT}
  #     - WEBHOOK_URL=${N8N_WEBHOOK_URL}
  #     - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL}
  #     - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
  #     - 'TZ=${TZ:-Europe/Berlin}'
  #     - DB_TYPE=postgresdb
  #     - DB_POSTGRESDB_HOST=${N8N_POSTGRES_HOST}
  #     - DB_POSTGRESDB_PORT=${N8N_POSTGRES_PORT}
  #     - DB_POSTGRESDB_DATABASE=${N8N_POSTGRES_DB}
  #     - DB_POSTGRESDB_USER=${N8N_POSTGRES_USER}
  #     - DB_POSTGRESDB_PASSWORD=${N8N_POSTGRES_PASSWORD}
  #     - DB_POSTGRESDB_SCHEMA=${N8N_POSTGRES_SCHEMA}
  #   volumes:
  #     - 'n8n_storage:/home/node/.n8n'
  #   depends_on:
  #     n8n_postgres:
  #       condition: service_healthy

  #   healthcheck:
  #     test:
  #       - CMD-SHELL
  #       - 'wget -qO- http://127.0.0.1:5678/'
  #     interval: 5s
  #     timeout: 20s
  #     retries: 10


  # n8n_postgres:
  #   image: 'postgres:16-alpine'
  #   volumes:
  #     - 'n8n_db_storage:/var/lib/postgresql/data'
  #   environment:
  #     - POSTGRES_USER=${N8N_POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${N8N_POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${N8N_POSTGRES_DB}
  #   healthcheck:
  #     test:
  #       - CMD-SHELL
  #       - 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'
  #     interval: 5s
  #     timeout: 20s
  #     retries: 10



  qdrant:
    image: qdrant/qdrant:v1.11.3
    restart: always
    volumes:
      - qdrant_storage:/qdrant/storage
    labels:
      - traefik.enable=true
      # HTTP → HTTPS Redirect (optional, wenn du auch Port 80 nutzen willst)
      - traefik.http.routers.qdrant-http.rule=Host(`${QDRANT_HOST}`)
      - traefik.http.routers.qdrant-http.entrypoints=web
      - traefik.http.routers.qdrant-http.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

      # HTTPS
      - traefik.http.routers.qdrant.rule=Host(`${QDRANT_HOST}`)
      - traefik.http.routers.qdrant.entrypoints=websecure
      - traefik.http.routers.qdrant.tls=true
      - traefik.http.routers.qdrant.tls.certresolver=le
      # interner Port, auf dem Qdrant lauscht
      - traefik.http.services.qdrant.loadbalancer.server.port=6333

  adminer:
    image: dockette/adminer:dg
    container_name: adminer
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.adminer.rule=Host(`${ADMINER_HOST}`)
      - traefik.http.routers.adminer.entrypoints=web

  mongo:
    image: mongo:7
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.mongo.rule=HostSNI(`${MONGO_HOST}`)
      - traefik.tcp.routers.mongo.entrypoints=mongo
      - traefik.tcp.services.mongo.loadbalancer.server.port=27017

  basedata_db:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${BASEDATA_USER}
      - POSTGRES_PASSWORD=${BASEDATA_PASSWORD}
      # Nutzt in der .env am besten: BASEDATA_DB=basedata
      - POSTGRES_DB=${BASEDATA_DB:-basedata}
    # kein Port‑Mapping nötig, die DB läuft nur im internen Netzwerk
    volumes:
      - basedata_db_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    # Passwortschutz (optional, aber empfohlen)
    command:
      - redis-server
      - --requirepass
      - "${REDIS_PASSWORD}"
      - --save
      - ""
      - --appendonly
      - "no"
    # Persistente Daten
    volumes:
      - redis_data:/data

  redis_commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      # Verbindungsdefinition zu deinem Redis-Container
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    expose:
      - "8081"
    labels:
      - traefik.enable=true
      # HTTP Fallback (für Erkennung durch Coolify)
      - traefik.http.routers.redis-commander-http.rule=Host(`${REDIS_UI_HOST}`)
      - traefik.http.routers.redis-commander-http.entrypoints=web
      - traefik.http.routers.redis-commander-http.middlewares=redirect-to-https

      # HTTPS
      - traefik.http.routers.redis-commander.rule=Host(`${REDIS_UI_HOST}`)
      - traefik.http.routers.redis-commander.entrypoints=websecure
      - traefik.http.routers.redis-commander.tls=true
      - traefik.http.routers.redis-commander.tls.certresolver=le
      - traefik.http.services.redis-commander.loadbalancer.server.port=8081

      # Middleware definieren, falls nicht global
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
volumes:
  n8n_storage:
  n8n_db_storage:
  qdrant_storage:
  mongo_data:
  basedata_db_data:
  nocodb_db_data:
  redis_data:
