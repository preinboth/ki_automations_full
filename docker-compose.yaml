version: '3.9'
services:

  n8n:
    image: n8nio/n8n:latest
    restart: always
    environment:
      - GENERIC_TIMEZONE=Europe/Berlin
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=${N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS:-true}
      - N8N_RUNNERS_ENABLED=${N8N_RUNNERS_ENABLED:-true}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n_postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_POSTGRES_DB}
      - DB_POSTGRESDB_USER=${N8N_POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_POSTGRES_PASSWORD}
      # - QDRANT_URL=http://qdrant:6333
      # - QDRANT_API_KEY=${QDRANT_API_KEY}
    volumes:
      - n8n_storage:/home/node/.n8n
    depends_on:
      - n8n_postgres
      # - qdrant
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${N8N_HOST}`)
      - traefik.http.routers.n8n.entrypoints=web

  n8n-import:
    image: n8nio/n8n:latest
    restart: "no"
    command: >
      /bin/sh -c "n8n import:credentials --input=/data/credentials && n8n import:workflow --input=/data/workflows"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n_postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_POSTGRES_DB}
      - DB_POSTGRESDB_USER=${N8N_POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_POSTGRES_PASSWORD}
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./import:/data
    depends_on:
      - n8n_postgres

  n8n_postgres:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=${N8N_POSTGRES_USER}
      - POSTGRES_PASSWORD=${N8N_POSTGRES_PASSWORD}
      - POSTGRES_DB=${N8N_POSTGRES_DB}
    volumes:
      - n8n_postgres_storage:/var/lib/postgresql/data

  # qdrant:
  #   image: qdrant/qdrant:v1.2.0
  #   restart: always
  #   volumes:
  #     - qdrant_storage:/qdrant/storage

  adminer:
    image: dockette/adminer:dg
    container_name: adminer
    depends_on:
      - n8n_postgres
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.adminer.rule=Host(`${ADMINER_HOST}`)
      - traefik.http.routers.adminer.entrypoints=web

  # mongo:
  #   image: mongo:7
  #   container_name: mongodb
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
  #     - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
  #   volumes:
  #     - mongo_data:/data/db
  #   restart: unless-stopped
  #   labels:
  #     - traefik.enable=true
  #     - traefik.tcp.routers.mongo.rule=HostSNI(`${MONGO_HOST}`)
  #     - traefik.tcp.routers.mongo.entrypoints=mongo
  #     - traefik.tcp.services.mongo.loadbalancer.server.port=27017


  # basedata_db:
  #   image: postgres:15
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_PASSWORD=${BASEDATA_PASSWORD}
  #     - POSTGRES_USER=${BASEDATA_USER}
  #     - POSTGRES_DB=${BASEDATA_DB}
  #   volumes:
  #     - basedata_db_data:/var/lib/postgresql/data

  # basedata_supabase_studio:
  #   image: supabase/studio
  #   restart: unless-stopped
  #   depends_on:
  #     - basedata_db
  #   environment:
  #     - STUDIO_PG_URL=postgresql://${BASEDATA_USER}:${BASEDATA_PASSWORD}@basedata_db:5432/${BASEDATA_DB}
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.supabase-studio.rule=Host(`${BASEDATA_SUPABASE_STUDIO_HOST}`)
  #     - traefik.http.routers.supabase-studio.entrypoints=web


volumes:
  n8n_storage:
  n8n_postgres_storage:
  basedata_db_data:
  # qdrant_storage:
  # mongo_data:
